#include <iostream>
#include <unordered_map>
#include <string>
#include <vector>
using namespace std;

void merge(int Xvals[],int Yvals[],int l,int mid,int h){
    int i=l;
    int j=mid+1;
    int k=l;
    int B[h+1];
    int C[h+1];
    
    
    while(i<=mid && j<=h){
        if((Xvals[i]+Yvals[i])/2<(Xvals[j]+Yvals[j])/2){
            B[k]=Xvals[i];
            C[k]=Yvals[i];
            i+=1;
            k+=1;
        }
        else{
            B[k]=Xvals[j];
            C[k]=Yvals[j];
            j+=1;
            k+=1;
        }
    }
    
    while(i<=mid){
        B[k]=Xvals[i];
        C[k]=Yvals[i];
        i+=1;
        k+=1;
    }
    while(j<=h){
        B[k]=Xvals[j];
        C[k]=Yvals[j];
        j+=1;
        k+=1;
    }
    
    for(int i=l;i<=h;i++){
        Xvals[i]=B[i];
        Yvals[i]=C[i];
    }
    
}

void merge_sort(int Xvals[],int Yvals[],int l,int h){
    int mid;
    if(l<h){
        mid=(l+h)/2;
        merge_sort(Xvals,Yvals,l,mid);
        merge_sort(Xvals,Yvals,mid+1,h);
        merge(Xvals,Yvals,l,mid,h);
    }
}

int main(){
    int n;
    cin>>n;
    int Xvals[n];
    int Yvals[n];
    for(int i=0;i<n;i++){
        int x;
        int y;
        cin>>x>>y;
        Xvals[i]=x;
        Yvals[i]=y;
    }
    
    merge_sort(Xvals,Yvals,0,n-1);
    cout<<"Final order: "<<endl;
    for(int i=0;i<n;i++){
        cout<<Xvals[i]<<" "<<Yvals[i]<<endl;
    }
    
    
}
